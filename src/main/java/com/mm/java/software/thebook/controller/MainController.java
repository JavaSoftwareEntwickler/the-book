package com.mm.java.software.thebook.controller;

import com.mm.java.software.thebook.model.UserName;
import com.mm.java.software.thebook.repository.UserNameRepository;
import io.micrometer.common.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


@Controller	// This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserNameRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        UserName n = new UserName();
        n.setName(name);
        n.setEmail(email);
        String message= (userRepository.findByEmail(email).orElse(new UserName(-1,"","")).getEmail().equals(email))
                ? "" : "Saved user with email : ";
        if(StringUtils.isBlank(message)) {
            message="not saved, duplicate email ";
        }else{
            userRepository.save(n);

        }
        return  message + userRepository.findByEmail(email).get().getEmail();
    }

    @GetMapping(path="/getAll")
    public @ResponseBody Iterable<UserName> getAllUsers() {
        // This returns a JSON or XML with the users

        return userRepository.findAll();
    }
}
